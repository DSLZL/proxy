name: V2Ray Proxy Tester

on:
  schedule:
    - cron: '0 6 * * *'  # 每天早上6点运行
  workflow_dispatch:

env:
  SUBSCRIPTION_URL: "https://raw.githubusercontent.com/aiboboxx/v2rayfree/main/v2"
  SPEED_TEST_URL: "http://www.gstatic.com/generate_204"
  TIMEOUT: 10
  BLACKLIST_KEYWORDS: "CN,中国,移动,电信,联通"

jobs:
  test-proxies:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl wget unzip
        sudo bash -c "$(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)" -- -f
        /usr/local/bin/v2ray version
        
    - name: Run proxy tester
      run: |
        set -e
        mkdir -p config output
        
        # 1. 下载订阅
        echo "正在下载订阅内容..."
        curl -s "$SUBSCRIPTION_URL" -o subscription.raw
        echo "下载完成，大小: $(wc -c < subscription.raw)字节"
        
        # 2. 解码内容
        echo -e "\n正在解码订阅内容..."
        base64 -d subscription.raw > decoded.txt || {
          echo "Base64解码失败，尝试直接使用原始内容"
          cp subscription.raw decoded.txt
        }
        
        # 3. 提取链接
        echo -e "\n正在提取代理链接..."
        grep -o 'vmess://[^"<> ]*' decoded.txt | sort -u > vmess_links.txt || true
        grep -o 'ss://[^"<> ]*' decoded.txt | sort -u > ss_links.txt || true
        
        echo "找到 vmess 链接: $(wc -l < vmess_links.txt) 个"
        echo "找到 ss 链接: $(wc -l < ss_links.txt) 个"
        
        # 4. 测试代理
        echo -e "\n开始测试代理..."
        VALID_PROXIES=()
        FAILED_PROXIES=()
        
        test_vmess() {
          local LINK=$1
          local INDEX=$2
          
          echo -e "\n测试代理 $INDEX: ${LINK:0:60}..."
          
          # 解析配置
          CONFIG_JSON=$(echo "${LINK:8}" | base64 -d 2>/dev/null || echo "")
          if [ -z "$CONFIG_JSON" ]; then
            echo "❌ 无法解码vmess链接"
            return 1
          fi
          
          PS=$(echo "$CONFIG_JSON" | jq -r '.ps' 2>/dev/null || echo "")
          for KEYWORD in ${BLACKLIST_KEYWORDS//,/ }; do
            if [[ "$PS" == *"$KEYWORD"* ]]; then
              echo "跳过: 包含黑名单关键词 '$KEYWORD'"
              return 1
            fi
          done
          
          # 生成V2Ray配置
          CONFIG=$(echo "$CONFIG_JSON" | jq -c '{
            inbounds: [{
              port: 10808,
              listen: "127.0.0.1",
              protocol: "socks",
              settings: { auth: "noauth", udp: true }
            }],
            outbounds: [{
              protocol: "vmess",
              settings: { vnext: [{
                address: .add,
                port: .port,
                users: [{ id: .id, alterId: (.aid // 0) }]
              }]},
              streamSettings: .streamSettings
            }]
          }')
          
          if [ $? -ne 0 ]; then
            echo "❌ JSON解析失败"
            return 1
          fi
          
          echo "$CONFIG" > config/config_$INDEX.json
          
          # 启动V2Ray
          timeout 15 /usr/local/bin/v2ray run -c config/config_$INDEX.json > /dev/null 2>&1 &
          V2RAY_PID=$!
          sleep 3
          
          # 测试连接
          START_TIME=$(date +%s%3N)
          if curl -x socks5://127.0.0.1:10808 -m $TIMEOUT -s $SPEED_TEST_URL > /dev/null; then
            LATENCY=$(( $(date +%s%3N) - $START_TIME ))
            echo "✅ 代理可用 - 延迟: ${LATENCY}ms"
            echo "$LINK" >> output/valid_proxies.txt
          else
            echo "❌ 代理不可用"
            echo "$LINK" >> output/failed_proxies.txt
          fi
          
          # 停止V2Ray
          kill $V2RAY_PID 2>/dev/null || true
          sleep 1
        }
        
        # 测试前5个vmess代理
        INDEX=0
        while read LINK && [ $INDEX -lt 5 ]; do
          ((INDEX++))
          test_vmess "$LINK" "$INDEX" || continue
        done < vmess_links.txt
        
        # 汇总结果
        echo -e "\n测试完成"
        if [ -f output/valid_proxies.txt ]; then
          VALID_COUNT=$(wc -l < output/valid_proxies.txt)
          echo "找到有效代理: $VALID_COUNT 个"
          echo "有效代理示例:"
          head -n 3 output/valid_proxies.txt
        else
          echo "未找到有效代理"
          echo "empty" > output/valid_proxies.txt
        fi
        
    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: proxy-results
        path: |
          output/valid_proxies.txt
          output/failed_proxies.txt
          decoded.txt
          vmess_links.txt
          ss_links.txt