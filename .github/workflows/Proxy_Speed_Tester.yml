name: Proxy Tester

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  test-proxies:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y wget jq bc unzip
        wget https://github.com/v2fly/v2ray-core/releases/latest/download/v2ray-linux-64.zip
        unzip v2ray-linux-64.zip
        chmod +x v2ray

    - name: Process subscription
      run: |
        # 订阅链接（替换为你的实际链接）
        SUBSCRIPTION_URL="https:/raw.githubusercontent.com/aiboboxx/v2rayfree/main/v2"
        
        # 获取订阅内容（自动处理base64和非base64情况）
        SUB_CONTENT=$(curl -s "$SUBSCRIPTION_URL")
        
        # 尝试base64解码（如果失败则使用原始内容）
        if DECODED=$(echo "$SUB_CONTENT" | base64 -d 2>/dev/null); then
          echo "$DECODED" > subscription.txt
        else
          echo "$SUB_CONTENT" > subscription.txt
        fi

        # 检测订阅类型并转换格式
        if grep -qE '^vmess://|^ss://|^trojan://' subscription.txt; then
          # 处理标准分享链接格式
          echo '{"outbounds": []}' > v2ray-config.json
          
          # 处理vmess链接
          grep -E '^vmess://' subscription.txt | while read line; do
            vmess_json=$(echo "${line#vmess://}" | base64 -d 2>/dev/null || echo "")
            [ -n "$vmess_json" ] && jq --argjson vmess "$vmess_json" '.outbounds += [{
              "protocol": "vmess",
              "settings": {"vnext": [$vmess]},
              "streamSettings": $vmess.streamSettings
            }]' v2ray-config.json > tmp.json && mv tmp.json v2ray-config.json
          done
          
          # 处理ss链接（简化版）
          grep -E '^ss://' subscription.txt | while read line; do
            ss_config=$(echo "${line#ss://}" | cut -d'#' -f1)
            decoded_ss=$(echo "$ss_config" | base64 -d 2>/dev/null || echo "")
            IFS=':' read -r method password_hostport <<< "$decoded_ss"
            IFS='@' read -r password hostport <<< "$password_hostport"
            IFS=':' read -r host port <<< "$hostport"
            
            jq --arg host "$host" --arg port "$port" --arg method "$method" --arg password "$password" \
              '.outbounds += [{
                "protocol": "shadowsocks",
                "settings": {
                  "servers": [{
                    "address": $host,
                    "port": $port|tonumber,
                    "method": $method,
                    "password": $password
                  }]
                }
              }]' v2ray-config.json > tmp.json && mv tmp.json v2ray-config.json
          done
          
          # 处理trojan链接（简化版）
          grep -E '^trojan://' subscription.txt | while read line; do
            trojan_config="${line#trojan://}"
            password=$(echo "$trojan_config" | cut -d'@' -f1)
            hostport=$(echo "$trojan_config" | cut -d'@' -f2 | cut -d'#' -f1)
            host=$(echo "$hostport" | cut -d':' -f1)
            port=$(echo "$hostport" | cut -d':' -f2)
            
            jq --arg host "$host" --arg port "$port" --arg password "$password" \
              '.outbounds += [{
                "protocol": "trojan",
                "settings": {
                  "servers": [{
                    "address": $host,
                    "port": $port|tonumber,
                    "password": $password
                  }]
                }
              }]' v2ray-config.json > tmp.json && mv tmp.json v2ray-config.json
          done
        else
          # 处理JSON格式配置
          jq '.' subscription.txt > v2ray-config.json
        fi

    - name: Test proxies
      run: |
        # 创建改进版测试脚本
        cat << 'EOF' > test-proxy.sh
        #!/bin/bash
        
        CONFIG_FILE="$1"
        RESULTS_FILE="$2"
        
        # 随机分配本地端口
        LOCAL_PORT=$((10800 + RANDOM % 1000))
        
        # 修改配置使用随机端口
        jq --argjson port "$LOCAL_PORT" '(.. | .port? | select(. != null)) |= $port' "$CONFIG_FILE" > "${CONFIG_FILE}.tmp"
        mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"
        
        # 启动v2ray
        ./v2ray -config "$CONFIG_FILE" > /dev/null 2>&1 &
        PID=$!
        sleep 3
        
        # 测试函数
        test_latency() {
          local max_retry=2
          local total_ms=0
          local success_count=0
          
          for ((i=1; i<=$max_retry; i++)); do
            start=$(date +%s%N)
            code=$(curl -s -x socks5://127.0.0.1:$LOCAL_PORT -o /dev/null -w "%{http_code}" \
                   https://www.gstatic.com/generate_204 -m 5)
            end=$(date +%s%N)
            
            if [ "$code" == "204" ]; then
              ms=$(( (end - start) / 1000000 ))
              total_ms=$(( total_ms + ms ))
              success_count=$(( success_count + 1 ))
            fi
          done
          
          if [ $success_count -gt 0 ]; then
            echo $(( total_ms / success_count ))
            return 0
          else
            echo 9999
            return 1
          fi
        }
        
        test_speed() {
          local max_time=15
          local url="https://speed.cloudflare.com/__down?bytes=10000000"
          
          start=$(date +%s%N)
          downloaded=$(curl -s -x socks5://127.0.0.1:$LOCAL_PORT -o /dev/null -w "%{size_download}" \
                    "$url" -m "$max_time")
          end=$(date +%s%N)
          
          if [ "$downloaded" -gt 0 ]; then
            duration=$(echo "scale=3; ($end - $start)/1000000000" | bc)
            echo $(echo "scale=2; ($downloaded*8)/($duration*1000000)" | bc)
            return 0
          else
            echo 0
            return 1
          fi
        }
        
        # 执行测试
        if latency=$(test_latency); then
          if speed=$(test_speed); then
            # 获取代理信息
            protocol=$(jq -r '.outbounds[0].protocol' "$CONFIG_FILE")
            address=$(jq -r '.outbounds[0].settings.servers[0].address // .outbounds[0].settings.vnext[0].address' "$CONFIG_FILE")
            port=$(jq -r '.outbounds[0].settings.servers[0].port // .outbounds[0].settings.vnext[0].port' "$CONFIG_FILE")
            
            # 输出结果
            echo -e "Proxy: ${protocol}://${address}:${port}" >> "$RESULTS_FILE"
            echo -e "Latency: ${latency}ms\tSpeed: ${speed} Mbps" >> "$RESULTS_FILE"
            echo -e "Status: Working ✔️" >> "$RESULTS_FILE"
            echo "------------------------" >> "$RESULTS_FILE"
            exit 0
          fi
        fi
        
        # 测试失败
        kill $PID 2>/dev/null
        exit 1
        EOF
        
        chmod +x test-proxy.sh
        
        # 准备测试
        mkdir -p proxy-configs
        jq -c '.outbounds[]' v2ray-config.json | while read -r proxy; do
          id=$(uuidgen | cut -d'-' -f1)
          echo "{\"outbounds\": [$proxy]}" > "proxy-configs/$id.json"
        done
        
        # 并发测试控制（最多5个并行）
        echo "测试结果：" > results.txt
        find proxy-configs -name '*.json' | xargs -P5 -I{} bash -c '
          ./test-proxy.sh "{}" results.txt && rm "{}" || {
            echo "Failed: {}" >&2
            rm "{}"
          }
        '

    - name: Save results
      uses: actions/upload-artifact@v4
      with:
        name: proxy-results
        path: results.txt