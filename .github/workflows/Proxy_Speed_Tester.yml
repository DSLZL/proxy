name: V2Ray Proxy Tester

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 每天运行一次

jobs:
  test-proxies:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyv2ray requests urllib3
        
    - name: Test proxies
      run: |
        # 创建测试脚本
        cat << 'EOF' > test_proxies.py
        import json
        import os
        import time
        import re
        from urllib.parse import urlparse, parse_qs, unquote
        import requests
        from v2ray_client import V2RayClient
        
        INPUT_FILE = os.getenv('INPUT_FILE', 'proxies/extracted_proxies.txt')
        OUTPUT_FILE = os.getenv('OUTPUT_FILE', 'proxies/working_proxies.txt')
        TEST_URL = os.getenv('TEST_URL', 'http://www.gstatic.com/generate_204')
        TIMEOUT = int(os.getenv('TIMEOUT', '30'))
        
        def parse_proxy_link(link):
            """解析各种V2Ray代理链接并返回标准配置"""
            try:
                parsed = urlparse(link)
                protocol = parsed.scheme.lower()
                config = {"protocol": protocol}
                
                # 通用参数
                if parsed.username:
                    config["uuid"] = parsed.username
                if parsed.password:
                    config["password"] = parsed.password
                
                config["address"] = parsed.hostname
                config["port"] = parsed.port or (443 if protocol.endswith('s') else 80)
                
                # 解析查询参数
                query = parse_qs(parsed.query)
                
                # 协议特定处理
                if protocol == "vmess":
                    config.update({
                        "alterId": int(query.get("aid", ["0"])[0]),
                        "security": query.get("scy", ["auto"])[0],
                        "network": query.get("type", ["tcp"])[0],
                        "path": unquote(query.get("path", [""])[0]),
                        "host": unquote(query.get("host", [""])[0]),
                        "tls": query.get("tls", ["none"])[0]
                    })
                elif protocol == "vless":
                    config.update({
                        "flow": query.get("flow", [""])[0],
                        "encryption": query.get("encryption", ["none"])[0],
                        "network": query.get("type", ["tcp"])[0],
                        "security": query.get("security", ["none"])[0],
                        "path": unquote(query.get("path", [""])[0]),
                        "host": unquote(query.get("host", [""])[0]),
                        "sni": query.get("sni", [""])[0]
                    })
                elif protocol in ["trojan", "trojan-go"]:
                    config.update({
                        "flow": query.get("flow", [""])[0],
                        "security": query.get("security", ["tls"])[0],
                        "network": query.get("type", ["tcp"])[0],
                        "path": unquote(query.get("path", [""])[0]),
                        "host": unquote(query.get("host", [""])[0]),
                        "sni": query.get("sni", [""])[0]
                    })
                elif protocol == "ss":
                    method_and_password = parsed.username.split(":")
                    if len(method_and_password) == 2:
                        config.update({
                            "method": method_and_password[0],
                            "password": method_and_password[1]
                        })
                    config["plugin"] = query.get("plugin", [""])[0]
                elif protocol == "socks":
                    config.update({
                        "user": parsed.username or "",
                        "pass": parsed.password or ""
                    })
                
                return config
            except Exception as e:
                print(f"Error parsing {link}: {str(e)}")
                return None
        
        def test_proxy(proxy_config):
            try:
                client = V2RayClient(proxy_config)
                start_time = time.time()
                with client:
                    response = requests.get(
                        TEST_URL,
                        proxies={'http': client.proxy, 'https': client.proxy},
                        timeout=TIMEOUT
                    )
                    if response.status_code == 200:
                        latency = (time.time() - start_time) * 1000  # in ms
                        return True, latency
            except Exception:
                pass
            return False, 0
        
        def main():
            with open(INPUT_FILE, 'r') as f:
                links = [line.strip() for line in f if line.strip()]
            
            working_proxies = []
            
            for link in links:
                try:
                    proxy_config = parse_proxy_link(link)
                    if proxy_config:
                        is_working, latency = test_proxy(proxy_config)
                        if is_working:
                            print(f"Working proxy: {link} (Latency: {latency:.2f}ms)")
                            working_proxies.append((link, latency, json.dumps(proxy_config)))
                except Exception as e:
                    print(f"Error processing {link}: {str(e)}")
            
            # Sort by latency (fastest first)
            working_proxies.sort(key=lambda x: x[1])
            
            # 保存原始链接
            with open(OUTPUT_FILE, 'w') as f:
                for link, _, _ in working_proxies:
                    f.write(f"{link}\n")
            
            # 可选：保存配置详情
            with open("proxy_configs.json", 'w') as f:
                json.dump([config for _, _, config in working_proxies], f, indent=2)
            
            print(f"\nFound {len(working_proxies)} working proxies out of {len(links)}")
        
        if __name__ == '__main__':
            main()
        EOF
        
        # 运行测试脚本
        python test_proxies.py
        
    - name: Commit results
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add working_proxies.txt proxy_configs.json
        git diff --quiet && git diff --staged --quiet || git commit -m "Update working proxies [skip ci]"
        git push