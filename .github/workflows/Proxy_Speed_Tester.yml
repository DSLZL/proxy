name: Proxy Tester

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # 每天运行一次

jobs:
  test-proxies:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y wget jq bc
        
        # 下载 v2ray-core
        V2RAY_VERSION=$(curl -s https://api.github.com/repos/v2fly/v2ray-core/releases/latest | jq -r '.tag_name')
        wget https://github.com/v2fly/v2ray-core/releases/download/${V2RAY_VERSION}/v2ray-linux-64.zip
        unzip v2ray-linux-64.zip
        chmod +x v2ray

    - name: Get and decode proxy subscription
      run: |
        # 订阅链接（直接明文存储）
        SUBSCRIPTION_URL="https:/raw.githubusercontent.com/aiboboxx/v2rayfree/main/v2"
        
        # 获取订阅内容并解码
        curl -s "$SUBSCRIPTION_URL" | base64 --decode > subscription.txt
        
        # 解析混合格式订阅（vmess://, ss://, trojan://等）
        echo '{"outbounds": []}' > v2ray-config.json
        
        # 处理vmess链接
        grep -E '^vmess://' subscription.txt | while read line; do
          vmess_content=$(echo "$line" | cut -d'/' -f3 | base64 --decode)
          jq --argjson vmess "$vmess_content" '.outbounds += [{
            "protocol": "vmess",
            "settings": {"vnext": [$vmess]},
            "streamSettings": $vmess.streamSettings
          }]' v2ray-config.json > tmp.json && mv tmp.json v2ray-config.json
        done
        
        # 处理ss链接（简化处理）
        grep -E '^ss://' subscription.txt | while read line; do
          ss_content=$(echo "$line" | cut -d'/' -f3)
          jq --arg ss "$ss_content" '.outbounds += [{
            "protocol": "shadowsocks",
            "settings": {"servers": [{"address": "example.com", "port": 1234, "method": "aes-256-gcm", "password": "password"}]}
          }]' v2ray-config.json > tmp.json && mv tmp.json v2ray-config.json
        done
        
        # 处理trojan链接（简化处理）
        grep -E '^trojan://' subscription.txt | while read line; do
          trojan_content=$(echo "$line" | cut -d'/' -f3)
          jq --arg trojan "$trojan_content" '.outbounds += [{
            "protocol": "trojan",
            "settings": {"servers": [{"address": "example.com", "port": 443, "password": "password"}]}
          }]' v2ray-config.json > tmp.json && mv tmp.json v2ray-config.json
        done

    - name: Test proxies
      run: |
        # 创建测试脚本
        cat << 'EOF' > test-proxy.sh
        #!/bin/bash
        
        CONFIG_FILE="$1"
        RESULTS_FILE="$2"
        
        # 启动v2ray
        ./v2ray -config "$CONFIG_FILE" > /dev/null 2>&1 &
        PID=$!
        sleep 5
        
        # 测试延迟（使用https://www.gstatic.com/generate_204）
        START_TIME=$(date +%s%N)
        RESPONSE=$(curl -s -x socks5://127.0.0.1:1080 -o /dev/null -w "%{http_code}" https://www.gstatic.com/generate_204 -m 10)
        END_TIME=$(date +%s%N)
        
        if [ "$RESPONSE" == "204" ]; then
          LATENCY_MS=$((($END_TIME - $START_TIME)/1000000))
          
          # 测试速度（使用https://speed.cloudflare.com/__down?bytes=10000000）
          START_TIME=$(date +%s%N)
          DOWNLOADED_BYTES=$(curl -s -x socks5://127.0.0.1:1080 -o /dev/null -w "%{size_download}" https://speed.cloudflare.com/__down?bytes=10000000 -m 30)
          END_TIME=$(date +%s%N)
          
          if [ "$DOWNLOADED_BYTES" -gt 0 ]; then
            DURATION_S=$(echo "scale=3; ($END_TIME - $START_TIME)/1000000000" | bc)
            SPEED_MBPS=$(echo "scale=2; ($DOWNLOADED_BYTES*8)/($DURATION_S*1000000)" | bc)
            
            # 输出结果
            echo "Proxy: $(jq -r '.outbounds[0].protocol' $CONFIG_FILE)" >> "$RESULTS_FILE"
            echo "Address: $(jq -r '.outbounds[0].settings.servers[0].address // .outbounds[0].settings.vnext[0].address' $CONFIG_FILE)" >> "$RESULTS_FILE"
            echo "Port: $(jq -r '.outbounds[0].settings.servers[0].port // .outbounds[0].settings.vnext[0].port' $CONFIG_FILE)" >> "$RESULTS_FILE"
            echo "Latency: ${LATENCY_MS}ms" >> "$RESULTS_FILE"
            echo "Speed: ${SPEED_MBPS} Mbps" >> "$RESULTS_FILE"
            echo "------------------------" >> "$RESULTS_FILE"
          fi
        fi
        
        kill $PID
        EOF
        
        chmod +x test-proxy.sh
        
        # 为每个代理创建单独配置并测试
        mkdir -p proxy-configs
        TOTAL_PROXIES=$(jq '.outbounds | length' v2ray-config.json)
        
        echo "开始测试 $TOTAL_PROXIES 个代理..."
        echo "测试结果：" > results.txt
        
        for ((i=0; i<$TOTAL_PROXIES; i++)); do
          CONFIG_FILE="proxy-configs/proxy-$i.json"
          echo '{"outbounds": []}' > "$CONFIG_FILE"
          jq --argjson idx "$i" '.outbounds += [.outbounds[$idx]]' v2ray-config.json > tmp.json && mv tmp.json "$CONFIG_FILE"
          
          echo "测试代理 $((i+1))/$TOTAL_PROXIES ..."
          ./test-proxy.sh "$CONFIG_FILE" results.txt && rm "$CONFIG_FILE" || echo "代理 $((i+1)) 测试失败"
        done

    - name: Save results
      uses: actions/upload-artifact@v4
      with:
        name: proxy-results
        path: results.txt